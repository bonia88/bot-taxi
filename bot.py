from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = '8065089437:AAGikOk9QLq3FUymIRN5ducHbxsTg6KV3Kc'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(
    types.KeyboardButton('üöï –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'),
    types.KeyboardButton('üìù –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä'),
)
menu_keyboard.add(
    types.KeyboardButton('‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏'),
    types.KeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'),
)

class OrderTransfer(StatesGroup):
    waiting_for_phone = State()
    waiting_for_name = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_comment = State()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏–º–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏ –∏–∑ –≥–æ—Ä–æ–¥–æ–≤ –ö–ú–í.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu_keyboard
    )

@dp.message_handler(lambda message: message.text == '‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏')
async def about_company(message: types.Message):
    await message.reply(
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –º–µ–∂–¥—É–≥–æ—Ä–æ–¥–Ω–∏–º–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º–∏ –∏–∑ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –í–æ–¥ –ø–æ –°–µ–≤–µ—Ä–Ω–æ–º—É –ö–∞–≤–∫–∞–∑—É –∏ –†–æ—Å—Å–∏–∏.\n"
        "–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ –∞–≤—Ç–æ –∏ –º–∏–Ω–∏–≤—ç–Ω—ã."
    )

@dp.message_handler(lambda message: message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def send_contacts(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram",
            url="https://t.me/rrrrrvvvggg"
        )
    )
    await message.reply(
        "üìû –ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:\n+79283223366\n\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == 'üìù –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä')
async def order_transfer(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await OrderTransfer.waiting_for_phone.set()

@dp.message_handler(state=OrderTransfer.waiting_for_phone, content_types=types.ContentTypes.TEXT)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await OrderTransfer.waiting_for_name.set()

@dp.message_handler(state=OrderTransfer.waiting_for_name, content_types=types.ContentTypes.TEXT)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.06):")
    await OrderTransfer.waiting_for_date.set()

@dp.message_handler(state=OrderTransfer.waiting_for_date, content_types=types.ContentTypes.TEXT)
async def process_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text.strip())
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:00):")
    await OrderTransfer.waiting_for_time.set()

@dp.message_handler(state=OrderTransfer.waiting_for_time, content_types=types.ContentTypes.TEXT)
async def process_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text.strip())
    await message.reply("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '-' –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç:")
    await OrderTransfer.waiting_for_comment.set()

@dp.message_handler(state=OrderTransfer.waiting_for_comment, content_types=types.ContentTypes.TEXT)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text.strip())
    data = await state.get_data()

    await message.reply(
        f"–¢–µ–ª–µ—Ñ–æ–Ω: *{data['phone']}*\n"
        f"–ò–º—è: *{data['name']}*\n"
        f"–î–∞—Ç–∞: *{data['date']}*\n"
        f"–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: *{data['time']}*\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{data['comment']}*\n\n"
        "‚úÖ –°–ø–∞—Å–∏–±–æ, –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä.",
        parse_mode="Markdown"
    )
    await state.finish()

@dp.message_handler(lambda message: message.text == 'üöï –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å')
async def start_route(message: types.Message):
    await message.reply(
        "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –≤ Telegram."
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
